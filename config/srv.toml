# wedisDB configuration
# Case insensitive, but use Camel Case naming
# notice: if don't config item, use defualt item's value

# storager name default xdis-storager 
# xdis-storager local storager with openkv
# xdis-tikv remote rpc storager with tikv 
#   tikv + pd,multi raft group, support gloabal dist txn (keys from diff region) (cp)
storagerName = "xdis-storager"

# resp cmd Server mode name
# standalone 
# replica-master-slave classic mode, need proxy manage sharding like codis (ap) (need failover server(like redis-sentinel(cp)) to keep HA)
# replica-single-raft mode like redis raft, need proxy manage sharding like codis (cp) (don't need failover server to keep HA, raft auto failover to keep HA)
# replica-multi-raft mode, need placemet driver (cp)
# https://jepsen.io/analyses/redis-raft-1b3fbf6
# matrix (todo) multi raft group (cp)
# cluster (todo) like redis cluster mode (ap)
respCmdSrvName = "standalone"
# todo replica put op commit (w) need optimize (async i/o), check i/o @weedgex3
#respCmdSrvName = "replica-master-slave"


server.logLevel = "debug"
server.projectName = "wedisSrv"

# pprof port
server.pprofPort = "2220"

# http Server listen address, set empty to disable
server.httpAddr = "127.0.0.1:8110"

# oltp cllector grpc endpoint address, set empty to disable
#server.oltpCollectorGrpcEndpoint = "0.0.0.0:4317"


# resp cmd Server listen address
standaloneRespCmdSrvCfg.addr = "0.0.0.0:6660"

# auth password
standaloneRespCmdSrvCfg.authPassword = ""

# if connection receives no data after n seconds, it may be dead, close
# 0 to disable and not check
# idle conn close time (s)
standaloneRespCmdSrvCfg.connKeepaliveInterval = 0


# Data store path, all wedisdb's data will be saved here
storeCfg.dataDir = "./data"

# Set the number of databases. You can use `select dbindex` to choose a db.
# dbindex must be in [0, databases - 1].
# Default databases is 16, maximum is 10240 now.
storeCfg.databases = 16

# set the number of slots, 
# Default slots is 1024
# set slots<=0, don't use slots
# set slots, don't change
# if change, use migrate** cmd migrate new slots from old
storeCfg.slots = 1024

# Sync commit to disk if possible
#  0: no sync
#  1: sync every second
#  2: sync every commit
storeCfg.dbSyncCommit = 0

# buffer op(put/del) batch commit
# default false
storeCfg.bufferOpCommit = false

# checking TTL (time to live) data every n seconds
# if you set big, the expired data may not be deleted immediately
storeCfg.ttlCheckInterval = 1

# Choose which backend storage to use, 
# impl openkv driver register to support:
# if store engine have tag, need add tag
storeCfg.kvStoreName = "goleveldb.kvStore"

# If not set, use dataDir/"kvStoreName"_data
storeCfg.dbPath = ""

# batch migrate key cn default 1000
storeCfg.migrateBatchKeyCn = 1000

## migrate key async task pipeline
#migrateAsyncTask.name = "migrate"
## buff task size default 10
## if chSize <=0  close migrateAsyncTask
#migrateAsyncTask.chSize = 10
## worker pool size default 10
#migrateAsyncTask.workerCn = 10


goLeveldbCfg.tag = "kvStore"
# if true, compression use snappy 
goLeveldbCfg.compression = false
goLeveldbCfg.blockSize = 32768
goLeveldbCfg.writeBufferSize = 67108864
goLeveldbCfg.cacheSize = 524288000
goLeveldbCfg.maxOpenFiles = 1024
goLeveldbCfg.compactionTableSize = 33554432
goLeveldbCfg.writeL0SlowdownTrigger = 16
goLeveldbCfg.writeL0PauseTrigger = 64


# resp cmd Server listen address
rplMasterSlaveRespCmdSrvCfg.addr = "0.0.0.0:6660"

# auth password
rplMasterSlaveRespCmdSrvCfg.authPassword = ""

# if connection receives no data after n seconds, it may be dead, close
# 0 to disable and not check
# idle conn close time (s)
rplMasterSlaveRespCmdSrvCfg.connKeepaliveInterval = 0

# replicaId unique replication ID
rplMasterSlaveRespCmdSrvCfg.replicaCfg.replicaId = ""

# Set replicaof/slaveof to enable replication from master, empty, no replication
# Any write operations except flushall and replication will be disabled in slave mode.
rplMasterSlaveRespCmdSrvCfg.replicaCfg.replicaOf = ""

# Readonly mode, slave server is always readonly even readonly = false
# for readonly mode, only replication and flushall can write
rplMasterSlaveRespCmdSrvCfg.replicaCfg.readOnly = false

# Path to store replication information(write ahead log, commit log, etc.)
# if not set, use ./data/rpl{replicaId}
rplMasterSlaveRespCmdSrvCfg.replicaCfg.path = ""

# If sync is true, the new log must be sent to some slaves, and then commit.
# It will reduce performance but have better high availability.
rplMasterSlaveRespCmdSrvCfg.replicaCfg.sync = false

# If sync is true, wait at last wait_sync_time milliseconds for slave syncing this log
rplMasterSlaveRespCmdSrvCfg.replicaCfg.waitSyncTime = 500

# If sync is true, wait at most min(wait_max_slave_acks, (n + 1) / 2) to promise syncing ok.
# n is slave number
# If 0, wait (n + 1) / 2 acks.
rplMasterSlaveRespCmdSrvCfg.replicaCfg.waitMaxSlaveAcks = 0

# Expire write ahead logs after the given days
rplMasterSlaveRespCmdSrvCfg.replicaCfg.expiredLogDays = 7

# log store name: openkv  etc...
# change in runtime is very dangerous
rplMasterSlaveRespCmdSrvCfg.replicaCfg.logStoreName = "openkv"

# for file store, if 0, use default 256MB, max is 1G
rplMasterSlaveRespCmdSrvCfg.replicaCfg.maxLogFileSize = 0

# for file store, if 0, use default 50
rplMasterSlaveRespCmdSrvCfg.replicaCfg.maxLogFileNum = 0

# Sync log to disk if possible
#  0: no sync
#  1: sync every second
#  2: sync every commit
rplMasterSlaveRespCmdSrvCfg.replicaCfg.syncLog = 0

# Compress the log or not
rplMasterSlaveRespCmdSrvCfg.replicaCfg.compression = false

# Path to store snapshot dump file
# if not set, use ./data/snapshot{replicaId}
# snapshot file name format is dmp-2006-01-02T15:04:05.999999999
rplMasterSlaveRespCmdSrvCfg.snapshotCfg.path = ""
# Reserve newest max_num snapshot dump files
rplMasterSlaveRespCmdSrvCfg.snapshotCfg.maxNum = 1

# log store path, all wedisdb's data will be saved here
rplMasterSlaveRespCmdSrvCfg.logStoreOpenkvCfg.dataDir = "./data"

# Sync commit to disk if possible for openkv
#  0: no sync
#  1: sync every second
#  2: sync every commit
rplMasterSlaveRespCmdSrvCfg.logStoreOpenkvCfg.dbSyncCommit = 0

# Choose which backend storage to use, 
# impl openkv driver register to support:
# memory (btree, sse-map, skiplist)
# LSM-Tree Log-Structured Merge Tree (goleveldb(simple kv),badger(big val),pebble(range))
# LSH Log-Structured Hash Table (gobeansdb(single search))
# B-Tree (bboltdb r)
# if store engine have tag, need add tag
rplMasterSlaveRespCmdSrvCfg.logStoreOpenkvCfg.kvStoreName = "goleveldb.logStore"

# If not set, use dataDir/"kvStoreName"_data
rplMasterSlaveRespCmdSrvCfg.logStoreOpenkvCfg.dbPath = ""

logStoreGoLeveldbCfg.tag = "logStore"
# if true, compression use snappy 
logStoreGoLeveldbCfg.compression = false
logStoreGoLeveldbCfg.blockSize = 32768
logStoreGoLeveldbCfg.writeBufferSize = 67108864
logStoreGoLeveldbCfg.cacheSize = 524288000
logStoreGoLeveldbCfg.maxOpenFiles = 1024
logStoreGoLeveldbCfg.compactionTableSize = 33554432
logStoreGoLeveldbCfg.writeL0SlowdownTrigger = 16
logStoreGoLeveldbCfg.writeL0PauseTrigger = 64


tikvStoreCfg.prefixKey = "hitiki"
tikvStoreCfg.Databases = 16
tikvStoreCfg.ttlCheckInterval = "1"

tikvStoreCfg.tikvClientOpts.useTxnApi = 1
tikvStoreCfg.tikvClientOpts.pdAddrs = "127.0.0.1:2379"
tikvStoreCfg.tikvClientOpts.useAsyncCommit = 0
tikvStoreCfg.tikvClientOpts.tryOnePcCommit = 0
tikvStoreCfg.tikvClientOpts.usePessimisticTxn = 0

tikvStoreCfg.gcJobOpts.gcEnabled = 1
tikvStoreCfg.gcJobOpts.gcInterval = 600
tikvStoreCfg.gcJobOpts.gcConcurrency = 8
tikvStoreCfg.gcJobOpts.gcSafepointLifeTime = 600

tikvStoreCfg.leaderJobOpts.leaderCheckInterval = 30
tikvStoreCfg.leaderJobOpts.leaderLeaseDuration = 60
