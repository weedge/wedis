# wedisDB configuration
# Case insensitive, but use Camel Case naming
# notice: if don't config item, use defualt item's value

# storager name default xdis-storager 
# xdis-storager local storager with openkv
# xdis-tikv remote rpc storager with tikv
storagerName = "xdis-storager"

# resp cmd Server mode name
# standalone 
# replica-master-slave classic mode, need proxy manage sharding like codis (ap) (need failover server(like redis-sentinel(cp)) to keep HA)
# replica-single-raft mode like redis raft, need proxy manage sharding like codis (cp) (don't need failover server to keep HA, raft auto failover to keep HA)
# replica-multi-raft mode , need placemet driver (cp)
# https://jepsen.io/analyses/redis-raft-1b3fbf6
# matrix (todo) multi raft group (cp)
# cluster (todo) like redis cluster mode (ap)
# AI mind? just YY, try
respCmdSrvName = "standalone"

[server]
logLevel = "debug"
projectName = "wedisSrv"

# http Server listen address, set empty to disable
httpAddr = "127.0.0.1:8110"

# pprof port
pprofPort = "10086"

# oltp cllector grpc endpoint address, set empty to disable
oltpCollectorGrpcEndpoint = "0.0.0.0:4317"

[standaloneRespCmdSrvCfg]
# resp cmd Server listen address
addr = "0.0.0.0:6666"

# auth password
authPassword = ""

# if connection receives no data after n seconds, it may be dead, close
# 0 to disable and not check
# idle conn close time (s)
connKeepaliveInterval = 0


[storeCfg]
# Data store path, all wedisdb's data will be saved here
dataDir = "./data"

# Set the number of databases. You can use `select dbindex` to choose a db.
# dbindex must be in [0, databases - 1].
# Default databases is 16, maximum is 10240 now.
databases = 16

# set the number of slots, 
# Default slots is 1024
# set slots<=0, don't use slots
# set slots, don't change
# if change, use migrate** cmd migrate new slots from old
slots = 0

# Sync commit to disk if possible
#  0: no sync
#  1: sync every second
#  2: sync every commit
dbSyncCommit = 0

# buffer op(put/del) batch commit
# default false
bufferOpCommit = false

# checking TTL (time to live) data every n seconds
# if you set big, the expired data may not be deleted immediately
ttlCheckInterval = 1

# Choose which backend storage to use, 
# impl openkv driver register to support:
# memory (btree, sse-map, skiplist)
# LSM-Tree Log-Structured Merge Tree (goleveldb(simple kv),badger(big val),pebble(range))
# LSH Log-Structured Hash Table (gobeansdb(single search))
# B-Tree (bboltdb r)
# if store engine have tag, need add tag
kvStoreName = "goleveldb.kvStore"

# If not set, use dataDir/"kvStoreName"_data
dbPath = ""

# batch migrate key cn default 1000
migrateBatchKeyCn = 1000

# migrate key async task pipeline
migrateAsyncTask.name = "migrate"
# buff task size defualt 10
## if chSize <=0  close migrateAsyncTask
migrateAsyncTask.chSize = 10
# max worker goroutine pool size defualt 10
migrateAsyncTask.workerCn = 10

[goLeveldbCfg]
tag = "kvStore"
# if true, compression use snappy 
compression = false
blockSize = 32768
writeBufferSize = 67108864
cacheSize = 524288000
maxOpenFiles = 1024
compactionTableSize = 33554432
writeL0SlowdownTrigger = 16
writeL0PauseTrigger = 64


[rplMasterSlaveRespCmdSrvCfg]
# resp cmd Server listen address
addr = "0.0.0.0:6666"

# auth password
authPassword = ""

# if connection receives no data after n seconds, it may be dead, close
# 0 to disable and not check
# idle conn close time (s)
connKeepaliveInterval = 0


[rplMasterSlaveRespCmdSrvCfg.replicaCfg]
# replicaId unique replication ID
replicaId = ""
# Set replicaof/slaveof to enable replication from master, empty, no replication
# Any write operations except flushall and replication will be disabled in slave mode.
replicaOf = ""

# Readonly mode, slave server is always readonly even readonly = false
# for readonly mode, only replication and flushall can write
readOnly = false

# Path to store replication information(write ahead log, commit log, etc.)
# if not set, use ./data/rpl{replicaId}
path = ""

# If sync is true, the new log must be sent to some slaves, and then commit.
# It will reduce performance but have better high availability.
sync = false

# If sync is true, wait at last wait_sync_time milliseconds for slave syncing this log
waitSyncTime = 500

# If sync is true, wait at most min(wait_max_slave_acks, (n + 1) / 2) to promise syncing ok.
# n is slave number
# If 0, wait (n + 1) / 2 acks.
waitMaxSlaveAcks = 2

# Expire write ahead logs after the given days
expiredLogDays = 7

# log store name: openkv
# change in runtime is very dangerous
logStoreName = "openkv"

# for file store, if 0, use default 256MB, max is 1G
maxLogFileSize = 0

# for file store, if 0, use default 50
maxLogFileNum = 0

# Sync log to disk if possible
#  0: no sync
#  1: sync every second
#  2: sync every commit
syncLog = 1

# Compress the log or not
compression = false

[rplMasterSlaveRespCmdSrvCfg.snapshotCfg]
# Path to store snapshot dump file
# if not set, use ./data/snapshot{replicaId}
# snapshot file name format is dmp-2006-01-02T15:04:05.999999999
path = ""
# Reserve newest max_num snapshot dump files
maxNum = 1

[rplMasterSlaveRespCmdSrvCfg.logStoreOpenkvCfg]
# log store path, all wedisdb's data will be saved here
dataDir = "./data"

# Sync commit to disk if possible for openkv
#  0: no sync
#  1: sync every second
#  2: sync every commit
dbSyncCommit = 2

# Choose which backend storage to use, 
# impl openkv driver register to support:
# memory (btree, sse-map, skiplist)
# LSM-Tree Log-Structured Merge Tree (goleveldb(simple kv),badger(big val),pebble(range))
# LSH Log-Structured Hash Table (gobeansdb(single search))
# B-Tree (bboltdb r)
# if store engine have tag, need add tag
# notice use goleveldb for debug/test, please use pprof tool view profiling
kvStoreName = "goleveldb.logStore"

# If not set, use dataDir/"kvStoreName"_data
dbPath = ""

[logStoreGoLeveldbCfg]
tag = "logStore"
# if true, compression use snappy 
compression = false
blockSize = 32768
writeBufferSize = 67108864
cacheSize = 524288000
maxOpenFiles = 1024
compactionTableSize = 33554432
writeL0SlowdownTrigger = 16
writeL0PauseTrigger = 64


[tikvStoreCfg]
prefixKey = "hitiki"
Databases = 16
ttlCheckInterval = 1

[tikvStoreCfg.tikvClientOpts]
useTxnApi = 1
pdAddrs = "127.0.0.1:2379"
useAsyncCommit = 0
tryOnePcCommit = 0
usePessimisticTxn = 0

[tikvStoreCfg.gcJobOpts]
gcEnabled = 1
gcInterval = 600
gcConcurrency = 8
gcSafepointLifeTime = 600

[tikvStoreCfg.leaderJobOpts]
leaderCheckInterval = 30
leaderLeaseDuration = 60
